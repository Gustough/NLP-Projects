murder <- read_csv('murder.csv')
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, tidy = FALSE, size = 'footnotesize', fig.align = 'center', out.width = '0.7\\textwidth', cache = FALSE)
# Chunk 2
library('tidyverse')
theme_set(theme_bw())
library('languageR')
# Chunk 3
data('beginningReaders')
readers <- beginningReaders %>%
group_by(Subject) %>%
summarise(LogRT = mean(LogRT),
ReadingScore = first(ReadingScore))
m <- lm(LogRT ~ ReadingScore, readers)
summary(m)
ggplot(readers, aes(ReadingScore, LogRT)) +
geom_point() +
geom_smooth(method = 'lm', se = FALSE)
# Chunk 4
b0 <- coefficients(m)[1]
b1 <- coefficients(m)[2]
# Chunk 5
ggplot(readers, aes(ReadingScore, LogRT)) +
geom_point() +
geom_abline(slope = b1, intercept = b0, color = 'blue', linewidth = 1) +
geom_point(x = 0, y = b0, color = 'red') +
xlim(-5, max(readers$ReadingScore))
# Chunk 6
readers <- readers %>%
mutate(ReadingScore_c = ReadingScore - mean(ReadingScore))
# Chunk 7
round(mean(readers$ReadingScore_c), 10)
# Chunk 8
sd(readers$ReadingScore)
sd(readers$ReadingScore_c)
# Chunk 9
m_c <- lm(LogRT ~ ReadingScore_c, readers)
coefficients(m_c)
# Chunk 10
ggplot(readers, aes(ReadingScore_c, LogRT)) +
geom_point() +
geom_smooth(method = 'lm', se = FALSE) +
geom_point(x = 0, y = coef(m_c)[1], color = 'red') +
geom_vline(xintercept = 0, linetype = 2)
# Chunk 11
b0 + b1 * mean(readers$ReadingScore)
# Chunk 12
coefficients(m)
coefficients(m_c)
# Chunk 13
voice <- read_csv('f0-spl.csv')
knitr::opts_chunk$set(echo = TRUE, tidy = FALSE, size = 'footnotesize', fig.align = 'center', cache = FALSE)
library('tidyverse')
library("boot")
library("MASS")
theme_set(theme_bw())
stex <- read_csv('stex.csv')
stex <- stex[complete.cases(stex), ]
sqrt(1193)
12log2(200/50)
12*log2(200/50)
1 / 120
(1 / 120) * 48000
617400 / 44100
12*log2(200/50)
11025 * 23
20 * log10(0.02/2 * 10^(-5))
20 * log10(0.02/(2 * 10^(-5))
)
20 * log10(0.02/(2 * 10^(-5)))
50 * 2^(3/12)
1587600 / 72
617400 / 44100
10 * log10((1*(10^(-8)))/1*(10^(-10)))
10 * log10((10^(-8))/(10^(-10)))
100 * 2^(0.5)
100 * (2^0.5)
100 * (2^(-0.5))
44100 * 90000
44100 * 90
10 * log10(0.01)
10 * log10(1/100)
10 * log10(1/20)
10 * log10(100)
1 / 48000
310 / 48000
1 / 0.006458
1 / (310/48000)
1 / (315/48000)
1 / (305/48000)
10* log10(20)
10* log10(10)
10* log10(1/20)
10* log10(1/10)
20 * log10(1/10)
20 * log10(1/10)
20 * log10(0.02/2 * (10)^(-5))
20 * log10(0.02/(2 * (10)^(-5)))
1/90
(1/90)*44100
11025*23
20 * log10(10/(2 * (10^(-5))))
20 * log10(5/(2 * (10^(-5))))
1587600 / 72
0.05 * 10000
!7%==
5 * 10000
0.005 * 10000
2e-5
1e-12
2*10^(-6)
20*10^(-6)
8 * 2^(50/1)
x = 100
y = 200
8 * log2(x/1)
8 * log2(y/1)
2e-12
1e-12
10 * log10(10/1e-12)
10 * log10(5/1e-12)
11025 * 23
20*log12(0.02/2e-5)
20*log10(0.02/2e-5)
20*log10(0.002/2e-5)
100 * log2(3/12)
100 * log2(6/12)
100 * log2(3/12)
100 * log2(6/12)
100 * log2(6/12)
150 * 1.2
44100 * 500
500/44100
500/22050
20*(2/20*1e-6)
20*(2/2*1e-5)
20*10^-6
20*1e-6
20 * log10 (0.02/ 2*e-5)
20 * log10 (0.02/2* 1e-5)
20 * log10 (0.02/(2* 1e-5))
23 * 11025
10*log10(50/1e-12)
10*log10(70/1e-12)
10log10(137/138.4)
10*log10(137/138.4)
1/20
150 * 1.3
150 * 1.2
1/280
1/320
320/44100
200/44100
10 * log10(80/100)
10 * log10(100/80)
2 = log10(i/I)
48000 / 120
20*log10(40/(2*1e-5))
20*log10(20/(2*1e-5))
20*log10(10/(2*1e-5))
20*log10((1/20/(2*1e-5))
20*log10((1/20/(2*1e-5)))
20*log10((1/20)/(2*1e-5))
20*log10((1/10)/(2*1e-5))
10^(-1)
100 * 2^(-0.5)
1 / 80
12*log2(50)
50 * 2(3/4)
50 * 2^(3/4)
12*log2(1/50)
12*log2(8)
2^(3/4)
12*log2(1.681793/12)
12*log2(50)
67.72627 * 2^(3/4)
12*log2(67.726/113)
12*log2(67.726/113.9)
12*log2(113.9/67)
0.05 * 10000
20 * log10(100/(2*1e-5))
2* 10 ^ (-5) * 10 ^ (133.9794/20)
1* 10 ^ (-5) * 10 ^ (133.9794/20)
20 * log10 (0.02/(2 * 1e-5))
20 * log10 (0.002/(2 * 1e-5))
12* log2 (200/50)
48000/310
90 * 44100
44100 / 90
11020 * 23
11025 * 23
10 ^ -1
1/48000
120* (1/48000)
48000/ 120
2 * 1e-5
2e-5
20*log10(0.02/2e-5)
20*log10(0.002/2e-5)
12*log2(4)
48000/270
48000/310
48000/400
10*log10(1e-8/1e-12)
10*log10(1e-10/1e-12)
0.05 * 10000
log(120) - log(211)
log(89) - log(211)
log(120) - log(211) + log(1) - log(211)
log(6) + log(1) - log(512930)
x <- 512930
log(16) + log(1) - log(512930)
log(120)
log(89)
log(2)
log(1)
log(211)
4.79 - 5.35
-0.56 - 5.35
4.49-5.35
-0.56 - 5.35
-0.86 - 0.56
- 1.42 - 5.35
- 0. 86 - 5.35
- 0. 86 - 5.35
-0. 86 - 5.35
0.86 + 5.35
- 0.56 - 5.35
-5.91 - 5.35
-1.42 -0.69
-1.42 - 5.35
52522 - 36
sqrt(3394433)
42809 - 33266
33265 - 21748
11239 + 33266
42809 - 33266
33265 - 21748
21747 - 11239
setwd("C:/Users/Gus/Desktop/Gus Doc/SU/2nd semester/Speech Technology/Project_directory/scripts")
library('tidyverse')
#FIRST model with Kendall-Tau Agreement Score
data <- read_csv("output.csv")
xs <- data.frame(scale(data[, -1]))
set.seed(1)
sample <- sample(1:90, 75)
training <- xs[sample,]
testing <- xs[-sample,]
model <- lm(AS ~ ., data=training)
summary(model, new_data = testing)
View(data)
library('tidyverse')
#FIRST model with Kendall-Tau Agreement Score
data <- read_csv("output.csv")
xs <- data.frame(scale(data[, -1]))
set.seed(1)
sample <- sample(1:90, 75)
training <- xs[sample,]
testing <- xs[-sample,]
model <- lm(AS ~ bc_to_speaker + skew, data=training)
summary(model, new_data = testing)
library('tidyverse')
#FIRST model with Kendall-Tau Agreement Score
data <- read_csv("output.csv")
xs <- data.frame(scale(data[, -1]))
set.seed(1)
sample <- sample(1:3000, 2500)
training <- xs[sample,]
testing <- xs[-sample,]
model <- lm(AS ~ ., data=training)
summary(model, new_data = testing)
library('tidyverse')
#FIRST model with Kendall-Tau Agreement Score
data <- read_csv("output.csv")
xs <- data.frame(scale(data[, -1]))
set.seed(1)
sample <- sample(1:300, 250)
training <- xs[sample,]
testing <- xs[-sample,]
model <- lm(AS ~ ., data=training)
summary(model, new_data = testing)
library('tidyverse')
#FIRST model with Kendall-Tau Agreement Score
data <- read_csv("output.csv")
xs <- data.frame(scale(data[, -1]))
set.seed(1)
sample <- sample(1:300, 250)
training <- xs[sample,]
testing <- xs[-sample,]
model <- lm(AS ~ ., data=training)
summary(model, new_data = testing)
library('tidyverse')
#FIRST model with Kendall-Tau Agreement Score
data <- read_csv("output.csv")
xs <- data.frame(scale(data[, -1]))
set.seed(1)
sample <- sample(1:300, 260)
training <- xs[sample,]
testing <- xs[-sample,]
model <- lm(AS ~ ., data=training)
summary(model, new_data = testing)
library('tidyverse')
#FIRST model with Kendall-Tau Agreement Score
data <- read_csv("output.csv")
xs <- data.frame(scale(data[, -1]))
set.seed(1)
sample <- sample(1:3000, 2600)
training <- xs[sample,]
testing <- xs[-sample,]
model <- lm(AS ~ ., data=training)
summary(model, new_data = testing)
#SECOND model with classification Agreement Score
library('tidyverse')
#FIRST model with Kendall-Tau Agreement Score
data <- read_csv("output.csv")
xs <- data.frame(scale(data[, -1]))
set.seed(1)
sample <- sample(1:100, 80)
training <- xs[sample,]
testing <- xs[-sample,]
model <- lm(AS ~ ., data=training)
summary(model, new_data = testing)
#SECOND model with classification Agreement Score
